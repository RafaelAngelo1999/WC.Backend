// <auto-generated />
using System;
using Infrastructure.Repository.Generics;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WC.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WC.Infra.Data.Entities.EcommerceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Ecommerces");
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.ImagemProdutoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProdutoEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Update_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoEntityId");

                    b.ToTable("ImagensProduto");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f98129f9-d1f5-4f97-997b-e446e2165ae8"),
                            Create_At = new DateTime(2021, 10, 27, 23, 54, 45, 554, DateTimeKind.Local).AddTicks(6336),
                            Name = "Rafael",
                            Update_At = new DateTime(2021, 10, 27, 23, 54, 45, 555, DateTimeKind.Local).AddTicks(7100),
                            Url = "rafael.angelo@gmail.com"
                        });
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.MarcaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.ProdutoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EcommerceIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Marca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MarcaIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("MediaAvaliacao")
                        .HasColumnType("real");

                    b.Property<float>("Preco")
                        .HasColumnType("real");

                    b.Property<float>("PrecoPromocional")
                        .HasColumnType("real");

                    b.Property<Guid?>("RotaRamificadaIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceIdId");

                    b.HasIndex("MarcaIdId");

                    b.HasIndex("RotaRamificadaIdId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.RotaRamificadaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EcommerceIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MarcaIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RotaRamificadaIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Update_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WasScraping")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceIdId");

                    b.HasIndex("MarcaIdId");

                    b.HasIndex("RotaRamificadaIdId");

                    b.ToTable("RotasRamificada");
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.RotaSementeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EcommerceIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MarcaIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pesquisa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EcommerceIdId");

                    b.HasIndex("MarcaIdId");

                    b.ToTable("RotasSemente");
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.ImagemProdutoEntity", b =>
                {
                    b.HasOne("WC.Infra.Data.Entities.ProdutoEntity", null)
                        .WithMany("Imagens")
                        .HasForeignKey("ProdutoEntityId");
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.ProdutoEntity", b =>
                {
                    b.HasOne("WC.Infra.Data.Entities.EcommerceEntity", "EcommerceId")
                        .WithMany()
                        .HasForeignKey("EcommerceIdId");

                    b.HasOne("WC.Infra.Data.Entities.MarcaEntity", "MarcaId")
                        .WithMany()
                        .HasForeignKey("MarcaIdId");

                    b.HasOne("WC.Infra.Data.Entities.RotaRamificadaEntity", "RotaRamificadaId")
                        .WithMany()
                        .HasForeignKey("RotaRamificadaIdId");

                    b.Navigation("EcommerceId");

                    b.Navigation("MarcaId");

                    b.Navigation("RotaRamificadaId");
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.RotaRamificadaEntity", b =>
                {
                    b.HasOne("WC.Infra.Data.Entities.EcommerceEntity", "EcommerceId")
                        .WithMany()
                        .HasForeignKey("EcommerceIdId");

                    b.HasOne("WC.Infra.Data.Entities.MarcaEntity", "MarcaId")
                        .WithMany()
                        .HasForeignKey("MarcaIdId");

                    b.HasOne("WC.Infra.Data.Entities.RotaSementeEntity", "RotaRamificadaId")
                        .WithMany("RotasRamificadas")
                        .HasForeignKey("RotaRamificadaIdId");

                    b.Navigation("EcommerceId");

                    b.Navigation("MarcaId");

                    b.Navigation("RotaRamificadaId");
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.RotaSementeEntity", b =>
                {
                    b.HasOne("WC.Infra.Data.Entities.EcommerceEntity", "EcommerceId")
                        .WithMany()
                        .HasForeignKey("EcommerceIdId");

                    b.HasOne("WC.Infra.Data.Entities.MarcaEntity", "MarcaId")
                        .WithMany()
                        .HasForeignKey("MarcaIdId");

                    b.Navigation("EcommerceId");

                    b.Navigation("MarcaId");
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.ProdutoEntity", b =>
                {
                    b.Navigation("Imagens");
                });

            modelBuilder.Entity("WC.Infra.Data.Entities.RotaSementeEntity", b =>
                {
                    b.Navigation("RotasRamificadas");
                });
#pragma warning restore 612, 618
        }
    }
}
